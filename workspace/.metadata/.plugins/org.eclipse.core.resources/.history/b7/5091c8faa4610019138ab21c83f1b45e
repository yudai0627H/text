package com.internousdev.ecsite.action;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.apache.struts2.interceptor.SessionAware;

import com.internousdev.ecsite.dao.BuyItemDAO;
import com.internousdev.ecsite.dao.ItemListDAO;
import com.internousdev.ecsite.dto.ItemListDTO;
import com.opensymphony.xwork2.ActionSupport;


public class BuyItemAction extends ActionSupport implements SessionAware {


	private static final long serialVersionUID=-7787951498734562406L;
	private String id;
	private String itemName;
	private String itemPrice;
	private String itemStock;
	private Collection<String> checkList;

	//アイテム購入個数
	//
	private String count;
	private List<String> errorMessageList = new ArrayList<String>();

	//支払い方法
	//
	private String pay;
	public Map<String, Object> session;
	private List<ItemListDTO> itemListDTOList =new ArrayList<ItemListDTO>();


	//商品購入情報登録メソット
	//
	public String execute() throws SQLException{
		String	result = ERROR;
		System.out.println("-----BuyItemAction");

		System.out.println("ID:"+id);
		System.out.println("ITEMNAME:"+itemName);
		System.out.println("ITEMPRICE:"+itemPrice);
		System.out.println("ITEMSTOCK:"+itemStock);
		System.out.println("COUNT:"+count);
		System.out.println("PAY:"+pay);
		System.out.println("CHECKLIST:"+checkList);

		String[] idList=id.split(", ",0);
		String[] itemNameList=itemName.split(", ",0);
		String[] itemPriceList=itemPrice.split(", ",0);
		String[] itemStockList=itemStock.split(", ",0);
		String[] countList=count.split(", ",0);


		ItemListDAO dao=new ItemListDAO();
		if(checkList==null){
			errorMessageList.add("商品が選択されていません");
			itemListDTOList=dao.getItemList();
			List<Integer> itemCountList = new ArrayList<Integer>();
			for (ItemListDTO dto : itemListDTOList) {
				int itemCount = Integer.parseInt(dto.getItemStock());

				for (int i=1; i<=itemCount; i++) {
					itemCountList.add(i);
				}
			}

			return ERROR;
		}
		BuyItemDAO buyItemDAO = new BuyItemDAO();

		System.out.println("ID数----->"+idList.length);
		for (int i=0; i<idList.length; i++){
			for(String check : checkList){
				System.out.println("CHECKED ID----->"+check);

				if(check.equals(String.valueOf(idList[i]))){
					int intCount = Integer.parseInt(countList[i]);
					//TODO
					int intItemStock = buyItemDAO.getItemStock(idList[i]);
					if (intCount > intItemStock) {
						errorMessageList.add(itemNameList[i]+"は在庫切れです。");
					} else {
						ItemListDTO dto =new ItemListDTO();

						dto.setId(idList[i].toString());
						dto.setItemTransactionId(idList[i].toString());
						dto.setItemName(itemNameList[i].toString());
						dto.setItemPrice(itemPriceList[i].toString());
						dto.setItemStock(itemStockList[i].toString());
						dto.setCount(countList[i].toString());

						int totalCount=Integer.parseInt(countList[i].toString());
						int price=Integer.parseInt(itemPriceList[i].toString());
						int total=price*totalCount;
						dto.setTotalPrice(String.valueOf(total));
						dto.setTotalCount(String.valueOf(countList[i].toString()));


						if(pay.equals("2")) {
							pay = "クレジットカード";
						} else {
							pay = "現金払い";
						}
						dto.setPay(pay);

						System.out.println("カート情報["+(i)+"]--");
						System.out.println("ID     				:"+dto.getId());
						System.out.println("ITEMTRANSACTIONID   :"+dto.getItemTransactionId());
						System.out.println("ITEMNAME		    :"+dto.getItemName());
						System.out.println("ITEMPRICE		    :"+dto.getItemPrice());
						System.out.println("ITEMSTOCK     		:"+dto.getItemStock());
						System.out.println("COUNT			    :"+dto.getCount());
						System.out.println("TOTALPRICE 		    :"+dto.getTotalPrice());
						System.out.println("TOTALCOUNT		    :"+dto.getTotalCount());
						System.out.println("PAY				    :"+dto.getPay());
						System.out.println("----------------------");

						itemListDTOList.add(dto);

					}
				}


			}

		}



		if (errorMessageList.size() > 0) {
			result = ERROR;
			itemListDTOList=dao.getItemList();
		} else {
			result=SUCCESS;
		}
		return result;
	}

	public String getId(){
		return id;
	}

	public void setId(String id){
		this.id=id;
	}

	public Collection<String> getCheckList(){
		return checkList;
	}

	public void setCheckList(Collection<String> checkList){
		this.checkList=checkList;
	}

	public String getItemName(){
		return itemName;
	}

	public void setItemName(String itemName){
		this.itemName=itemName;
	}

	public String getItemPrice(){
		return itemPrice;
	}

	public void setItemPrice(String itemPrice){
		this.itemPrice=itemPrice;
	}

	public String getItemStock(){
		return itemStock;
	}

	public void setItemStock(String itemStock){
		this.itemStock=itemStock;
	}

	public String getCount(){
		return count;
	}

	public void setCount(String count) {
		this.count=count;
	}

	public String getPay(){
		return pay;
	}

	public void setPay(String pay){
		this.pay=pay;
	}

	public Map<String, Object> getSession(){
		return session;
	}

	@Override
	public void setSession(Map<String, Object> session){
		this.session=session;
	}

	public List<ItemListDTO> getItemListDTOList(){
		return itemListDTOList;
	}

	public List<String> getErrorMessageList() {
		return errorMessageList;
	}

	public void setErrorMessageList(List<String> errorMessageList) {
		this.errorMessageList = errorMessageList;
	}

	public void setItemList(List<ItemListDTO>itemListDTOList){
		this.itemListDTOList=itemListDTOList;
	}



}
